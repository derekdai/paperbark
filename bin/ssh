#!/bin/bash

# $1: user@host
# $2: input fd
# $3: output fd
# $@: command to run remotely
ssh_tunnel_create() {
    ssh_tunnel_destroy() {
        eval "exec $1<&-; exec $2>&-"
    }

    local _remote=$1
    local -i _port=${_remote#*:}
    
    if [[ 0 == $_port ]]; then
    
       _port=22
    
    fi

    _remote=${_remote%:*}; shift
    local _fd_in="$1"; shift
    local _fd_out="$1"; shift

    local _fifo_in=$(mktemp -u)
    local _fifo_out=$(mktemp -u)
    mkfifo $_fifo_in $_fifo_out
    cleanup_stack_push "unlink $_fifo_in; unlink $_fifo_out"

    if [[ "$SUDO_USER" ]]; then
        sudo_cmd="sudo -u $SUDO_USER"
    fi
    $sudo_cmd ssh -p "$_port" -T "$_remote" "$@" >$_fifo_in <$_fifo_out &
    local _ssh_pid=$!
    cleanup_stack_push "timeout_wait $_ssh_pid 2 || kill $_ssh_pid &>/dev/null"

    eval "exec $_fd_in<$_fifo_in; exec $_fd_out>$_fifo_out"
    cleanup_stack_push "ssh_tunnel_destroy $_fd_in $_fd_out; sleep 0.2"
}

# $1: user name
# $2: path of public key
ssh_authkey_gen_record() {
    local _key_content
    read _key_content <"$2"
    echo "command=\"$bin_dir/pbtunnel $1\" $_key_content"
}

ssh_create_dot_ssh_dir() {
    mkdir --mode 0700 -p "$HOME/.ssh"
}

declare -gi _ssh_timeout=5
