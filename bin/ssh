#!/bin/bash

# $1: user@host
# $2: input fd
# $3: output fd
# $@: command to run remotely
ssh_tunnel_create() {
    ssh_tunnel_destroy() {
        eval "exec $1<&-; exec $2>&-"
    }

    local _remote="$1"; shift
    local _fd_in="$1"; shift
    local _fd_out="$1"; shift

    local _fifo_in=$(mktemp -u)
    local _fifo_out=$(mktemp -u)
    mkfifo $_fifo_in $_fifo_out
    cleanup_stack_push "unlink $_fifo_in; unlink $_fifo_out"

    if [[ "$SUDO_USER" ]]; then
        sudo_cmd="sudo -u $SUDO_USER"
    fi
    $sudo_cmd ssh -T "$_remote" "$@" >$_fifo_in <$_fifo_out &
    local _ssh_pid=$!
    cleanup_stack_push "timeout_wait $_ssh_pid 2 || kill $_ssh_pid &>/dev/null"

    eval "exec $_fd_in<$_fifo_in; exec $_fd_out>$_fifo_out"
    cleanup_stack_push "ssh_tunnel_destroy $_fd_in $_fd_out; sleep 0.2"

    ssh_tunnel_hello <&$_fd_in >&$_fd_out
}

ssh_tunnel_hello() {
    echo hello
    local _hello_back
    if ! read -t $_ssh_timeout _hello_back || [[ 'hello-back' != "$_hello_back" ]]; then
        exit 1
    fi
}

ssh_tunnel_hello_back() {
    # make sure tunnel is work
    local _hello
    if ! read -t $_ssh_timeout _hello || [[ 'hello' != "$_hello" ]]; then
        echo failed to create ssh tunnel >&2
        exit 1
    fi
    echo hello-back
}

declare -gi _ssh_timeout=5
