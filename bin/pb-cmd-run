#!/bin/bash
commands['run']='run a command in particular snapshot of filesystem'
dep_add mount umount chrooot

cmd_run_help() {
    echo """
usage
    $pb_exec run [OPTIONS] FS|SNAPSHOT [--] [COMMAND [ARG1 ARG2 ...]]
        OPTIONS
            -n|--no-auto
                do not auto mount frequently mounted filesystem
                eg. /proc, /sys, /dev, /home, ...
            -0|--root
                run with root privilege
            -m|--mount outer[:inner]
                mount point to be mounted into filesystem
            -u|--user-spec user:group
                run command as specified user and group
            -r|--remove
                remove cloned staging filesystem
        FS
            filesystem the command runs in
        SNAPSHOT
            clone specified snapshot as new filesystem and run command in it
        --
            stop parsing arguments
        COMMAND
            command to runs in FS

eg. $pb_exec run ubuntu:12.04 /bin/bash

    $pb_exec run bad6a90a-968b-4107-9a6d-adbee2f00e2f /bin/sh
"""

    exit 0
}

cmd_run_prepare() {
    pb_prepare_repository

    local default_mount_descs=(
        /dev
        /proc
        /run
        /sys
        -/tmp
        /home
        /root
        /etc/hostname
        /etc/hosts
        /etc/resolv.conf
        /etc/passwd
        /etc/group
        /etc/shadow
    )

    if [[ 0 == $# ]]; then
        cmd_run_help
    fi

    while [[ 0 != $# ]]; do
        if [[ "$dash_dash" ]]; then
            run_command+=("$1")
            continue
        fi

        case $1 in
            -h | --help)
                cmd_run_help
                ;;
            --)
                local dash_dash=on
                ;;
            -m)
                shift
                if [[ 0 == $# ]]; then
                    echo 'need extra argument for --mount'
                    exit 1
                fi
                mount_descs+=("$1")
                ;;
            -n | --no-auto)
                run_no_auto=yes
                ;;
            -0 | --root)
                user_spec=0:0
                ;;
            -u | --user-spec)
                shift
                if [[ 0 == $# ]]; then
                    echo 'need extra argument for --user-spec'
                    exit 1
                fi
                user_spec="$1"
                ;;
            -r | --remove)
                run_remove=yes
                ;;
            *)
                if [[ -z "$run_fs" ]]; then
                    run_fs="$1"
                else
                    run_command+=("$1")
                fi
                ;;
        esac

        shift
    done

    if [[ -z "$run_fs" ]]; then
        echo no filesystem specified
        cmd_run_help
    fi

    if [[ 0 == ${#run_command[@]} ]]; then
        run_command=(/bin/bash --login)
    fi

    if [[ -z "$run_no_auto" ]]; then
        mount_descs+=("${default_mount_descs[@]}")
    fi

    if [[ -z "$user_spec" ]]; then
        if [[ "$SUDO_UID" ]]; then
            user_spec="$SUDO_UID:$SUDO_GID"
        else
            user_spec="0:0"
        fi
    fi
}

cmd_run_exec() {
    # $1: mount desc
    # $2: variable name of outter path
    # $3: variable name of inner path
    # $4: rbind flag
    mount_desc_split() {
        local outter="${1%:*}"
        local inner="${1#$outter}"
        inner="${inner#:}"

        if [[ '-' == "${outter:0:1}" ]]; then
            local rbind=yes
            outter="${outter:1}"
        fi

        if [[ -z "$inner" ]]; then
            inner="$outter"
        fi

        eval $2="$outter"
        eval $3="$inner"
        eval $4="$rbind"
    }

    run_exec() {
        root_dir="$temp_dir/root"
        mkdir "$root_dir"

        snapshot_or_staging_mount "$run_fs" "$root_dir"

        if [[ ! -x "$root_dir/${run_command[0]}" ]]; then
            echo command not found in target file system: ${run_command[0]}
            exit 1
        fi

        if [[ ! -e "$root_dir/etc/mtab" ]]; then
            ln -sfn /proc/self/mounts "$root_dir/etc/mtab"
        fi

        for mount_desc in "${mount_descs[@]}"; do
            mount_desc_split "$mount_desc" src dest no_rbind
            dest="$root_dir$dest"

            if [[ -d "$src" ]]; then
                if [[ "$no_rbind" ]]; then
                    mount_args+=('--bind')
                else
                    mount_args+=('--rbind')
                fi
                if [[ ! -e "$dest" ]]; then
                    mkdir -p "$dest"
                fi
            elif [[ -f "$src" ]]; then
                mount_args+=('--bind')
                if [[ ! -e "$dest" ]]; then
                    mkdir -p "${dest%/*}"
                    echo >"$dest"
                fi
            elif [[ ! -e "$src" ]]; then
                echo mount point does not exist: $src
                continue
            fi

            mount "${mount_args[@]}" "$src" "$dest"
            if [[ -z "$no_rbind" ]]; then
                mount --make-rslave "$dest"
            fi

            unset mount_args no_rbind
        done

        chroot --userspec $user_spec "$root_dir" "${run_command[@]}"
    }

    if ! staging_id_check_and_normalize "$run_fs" run_fs; then
        if snapshot_id_normalize "$run_fs" run_fs; then
            staging_clone_from_snapshot "$run_fs" run_fs
            cleanup_stack_push "[[ -z \$keep_staging ]] && staging_destroy $run_fs"
        else
            echo filesystem does not exist: $run_fs
            exit 1
        fi
    fi

    temp_dir=$(mktemp -d)
    cleanup_stack_push "rmdir '$temp_dir'"

    mount -t tmpfs none "$temp_dir"
    cleanup_stack_push "umount -l '$temp_dir'"
    mount --make-private "$temp_dir"

    run_exec || true

    if [[ -z "$run_remove" ]]; then
        keep_staging=yes
        echo ${run_fs##*/}
    fi
}
