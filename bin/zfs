#!/bin/bash

# $1: path ov vdev (image)
# $2: pool name
pool_create() {
    zpool create -m legacy \
        -o ashift=12 \
        -O compression=on \
        "$2" "$1"
}

# $1: pool name
pool_destroy() {
    zpool destroy "$1"
}

# $1: pool name
pool_is_active() {
    zpool list -H -o name "$1" &>/dev/null
}

# $1: image directory
# $2: pool name
pool_import() {
    zpool import -d "$1" $2
}

pool_activate() {
    pool_file=($repo_dir/*.zfs)
    pool_file="${pool_file[0]}"
    if [[ ! -f "$pool_file" ]]; then
        return 1
    fi

    pool_name="${pool_file##*/}"
    pool_name="${pool_name%.zfs}"
    if pool_is_active "$pool_name"; then
        return
    fi

    pool_import "$repo_dir" "$pool_name"
}

dataset_exists() {
    zfs list -H -o name "$1" &>/dev/null
}

dataset_create() {
    zfs create -o mountpoint=legacy -p "$1"
}

# $1: dataset name
# $2: mount point
dataset_mount() {
    local _dataset="$1"; shift
    local _mount_point="$1"; shift
    mount -t zfs "$_dataset" "$_mount_point" "$@"
}

dataset_destroy() {
    zfs destroy -f "$1"
}

dataset_list() {
    zfs list -r -H -o name -S creation -S name "$1"
}

# $1: dataset
# $2: callback, return false to stop enumerating.
# $*: arguments for callback
# return: true if callback never failed.
dataset_enum() {
    local _dataset="$1"; shift
    local _callback="$1"; shift
    while read line; do
        if ! $_callback "$line" "$@"; then
            return 1
        fi
    done < <(zfs list -r -H -o name -S creation -S name "$_dataset")
}

# $1: dataset
dataset_is_stagging() {
    [[ "${1#$dataset_staggings}" != "$1" ]]
}

# $1: dataset
dataset_is_snapshot() {
    [[ "${1#$dataset_snapshots}" != "$1" ]]
}

# $1: source dataset
# $2: destination dataset
dataset_move() {
    zfs rename -p "$1" "$2"
}

# $1: callback, return false to stop enumerating.
#    $1: fs
#    $2: snapshot id
# $*: arguments for callback
snapshot_enum() {
    local _callback="$1"; shift
    while read line; do
        line="${line##*/}"
        local _fs="${line%@*}"
        local _snap_id="${line#*@}"
        if ! $_callback "$_snap_id" "$_fs" "$@"; then
            return 1
        fi
    done < <(zfs list -t snap -r -H -o name -S creation -S name "$dataset_snapshots")
}

# $1: source snapshot
# $2: destination snapshot
snapshot_rename() {
    zfs rename "$1" "$2"
}

# $1: pool name
snapshot_list() {
    zfs list -t snapshot -r -H -S creation -o name "$@"
}

# $1: fs
# $2: snapshot id
snapshot_create() {
    local _fs="$1"; shift
    local _snap_id="$1"; shift
    zfs snapshot "$dataset_snapshots/$_fs@$_snap_id" "$@"
}

# $1: snapshot id
# $2: variable name of dataset
snapshot_exists() {
    _snapshot_exists() {
        if [[ "$1" == "$3" ]]; then
            if [[ "$4" ]]; then
                eval $4="$dataset_snapshots/$2@$1"
            fi
            return 1
        fi
    }

    local _snap_id="$1"; shift
    snapshot_id_add_version "$_snap_id" latest _snap_id
    if snapshot_enum _snapshot_exists "$_snap_id" "$@"; then
        return 1
    fi
}

# $1: fs
# $2: variable name of dataset
snapshot_fs_exists() {
    _snapshot_fs_to_dataset() {
        if [[ "$2" == "$3" ]]; then
            eval $4="$dataset_snapshots/$2@$1"
            return 1
        fi
    }

    if snapshot_enum _snapshot_fs_to_dataset "$@"; then
        return 1
    fi
}

# $1: snapshot id
# $2: variable name of dataset
snapshot_to_dataset() {
    _snapshot_to_dataset() {
        if [[ "$1" == "$3" ]]; then
            eval $4="$dataset_snapshots/$2@$1"
            return 1
        fi
    }

    if snapshot_enum _snapshot_to_dataset "$@"; then
        return 1
    fi
}

# $1: variable of newly created stagging filesystem
stagging_create() {
    local _fs=$(uuidgen)
    dataset_create "$dataset_staggings/$_fs"
    eval $1="$_fs"
}

# $1: stagging ID
stagging_destroy() {
    dataset_destroy "$dataset_staggings/$1"
}

# $1: stagging ID
# $2: optional. variable name of mount point
stagging_mount() {
    local _stagging_id="$1"; shift
    local _dest_mount_point="$(mktemp -d /tmp/paperbark-$$-XXXXXX)"
    dataset_mount "$dataset_staggings/$_stagging_id" "$_dest_mount_point"
    if [[ "$2" ]]; then
        eval $2="$_dest_mount_point"
    fi
}

# $1: stagging ID
# $2: variable name of dataset
stagging_exists() {
    if dataset_exists "$dataset_staggings/$1"; then
        if [[ "$2" ]]; then
            eval $2="$dataset_staggings/$1"
        fi
    else
        return 1
    fi
}

# $1: callback, return false to stop enumerating.
#     $1: stagging fs
# $*: arguments for callback
# return: true if callback never failed.
stagging_enum() {
    _stagging_enum() {
        local _fs="$1"; shift
        _fs="${_fs#${dataset_staggings}}"
        _fs="${_fs#/}"
        if [[ -z "$_fs" ]]; then
            continue
        fi
        local _callback="$1"; shift
        if ! $_callback "$_fs" "$@"; then
            return 1
        fi
    }
    dataset_enum "$dataset_staggings" _stagging_enum "$@"
}

# $1: filesystem
# $2: prefix
# $3: variable name of result dataset
stagging_move_to_snapshots() {
    local _dest="$dataset_snapshots/$1"
    zfs rename -p "$dataset_staggins/$1" "$_dest"

    if [[ "$3" ]]; then
        eval $3="$_dest"
    fi
}

# $1: tag ID
# $2: name of variable of tag name
# $3: name of variable of tag version
# $4: if tag ID has only tag name part, use this value as tag version
# return: true if version part of tag ID is not empty, false if not
snapshot_id_split() {
    eval $2="${1%:*}"
    eval $3="${1#${!2}}"
    eval $3="${!3#:}"
    if [[ -z "${!3}" ]]; then
        eval $3="$4"
    fi

    [[ "${!3}" ]]
}

# $1: snapshot id
snapshot_id_has_version() {
    [[ "${1%:*}" != "$1" ]]
}

# $1: snapshot id
# $2: snapshot version
# $3: variable name of final snapshot id
snapshot_id_add_version() {
    if ! snapshot_id_has_version "$1"; then
        eval $3="$1:$2"
    fi
}

# $1: snapshot filesystem
# $2: optional. variable name of resulting dataset
snapshot_fs_to_staggings() {
    local _dest_dataset="$dataset_staggings/$1"
    dataset_move "$dataset_snapshots/$1" "$_dest_dataset"
    if [[ "$2" ]]; then
        eval $2="$_dest_dataset"
    fi
}

# $1: snapshot id
# $2: variable name of stagging filesystem
stagging_clone_from_snapshot() {
    local _snap_id="$1"; shift
    local _snap_dataset
    snapshot_exists "$_snap_id" _snap_dataset
    local _fs=$(uuidgen)
    zfs clone "$_snap_dataset" "$dataset_staggings/$_fs"
    eval $1="$_fs"
}

# $1: stagging fs
# $2: variale name of mount point
stagging_mount() {
    local _mount_point=$(mktemp -d /tmp/$exec_file-$$-XXXXXX)
    cleanup_stack_push "rmdir '$_mount_point'"

    mount -t zfs "$dataset_staggings/$1" "$_mount_point"
    eval $2="${_mount_point}"
}

# $1: stagging filesystem
# $2: variable name of resulting dataset
stagging_move_to_snapshots() {
    local _dest_dataset="$dataset_snapshots/$1"
    dataset_move "$dataset_staggings/$1" "$_dest_dataset"
    if [[ "$2" ]]; then
        eval $2="$_dest_dataset"
    fi
}
