#!@BASH_EXEC@
pb_exec=${BASH_SOURCE##*/}
pb_dir=$(readlink -f ${BASH_SOURCE})
pb_dir="${pb_dir%/*}"
PS4="$pb_exec - "

if [[ -f "$pb_dir/suentry-$pb_exec" ]]; then
    if [[ 0 != $UID ]]; then
        echo superuser privilege is required
        exit 1
    fi

    if [[ $$ != $UNSHARED ]]; then
        UNSHARED=$$ exec unshare --uts --mount -- $0 "$@"
    fi
    unset UNSHARED
fi

import() {
    while [[ 0 != $# ]]; do
        source "$pb_dir/${1##*/}"
        shift
    done
}

import_subcommands() {
    for sub_cmd in "$pb_dir"/$pb_exec-*; do
        if [[ ! -f "$sub_cmd" ]]; then
            break;
        fi

        source "$sub_cmd"
    done
}

_default_destroy() {
    set +o errexit
    trap "" INT TERM

    cleanup_stack_pop_all
}

# name - description pairs
declare -A commands
declare -A command_alias
declare -A remotes
declare -A config

set -o errexit

import utils zfs ssh
import_subcommands

if [[ -f "$pb_dir/pbentry-$pb_exec" ]]; then
    source "$pb_dir/pbentry-$pb_exec"
elif [[ -f "$pb_dir/suentry-$pb_exec" ]]; then
    source "$pb_dir/suentry-$pb_exec"
else
    error invalide entry: $pb_exec >&2
fi

pb_cmd_prefix="${pb_exec//-/_}"
if type ${pb_cmd_prefix}_prepare &>/dev/null; then
    ${pb_cmd_prefix}_prepare
fi

if type ${pb_cmd_prefix}_destroy &>/dev/null; then
    trap ${pb_cmd_prefix}_destroy EXIT
else
    trap _default_destroy EXIT
fi

${pb_cmd_prefix}_exec "$@"
