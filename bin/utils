#!/bin/bash
log_trace() {
    echo -e " \e[90mT $@\e[0m" >&2
}

log_info() {
    echo -e " \e[32mI\e[0m $@" >&2
}

log_warn() {
    echo -e " \e[33mW\e[0m $@" >&2
}

log_error() {
    echo -e " \e[31mE\e[0m $@" >&2
}

cleanup_stack_init() {
    unset cleanup_jobs
}

cleanup_stack_push() {
    cleanup_jobs+=("$*")
}

cleanup_stack_pop_n_drop() {
    local -i index=${#cleanup_jobs[@]}-1
    unset cleanup_jobs[$index]
}

cleanup_stack_pop() {
    local -i index=${#cleanup_jobs[@]}-1
    log_trace ${cleanup_jobs[$index]}
    eval ${cleanup_jobs[$index]}
    unset cleanup_jobs[$index]
}

cleanup_stack_is_empty() {
    [[ 0 == ${#cleanup_jobs[@]} ]]
}

cleanup_stack_pop_all() {
    while ! cleanup_stack_is_empty; do
        cleanup_stack_pop
    done
}

fd_is_terminal() {
    [[ -t $1 ]]
}

stdin_is_terminal() {
    fd_is_terminal 0
}

stdout_is_terminal() {
    fd_is_terminal 1
}

stderr_is_terminal() {
    fd_is_terminal 2
}

# $1: path
# $2: size
create_sparse_file() {
    truncate --size "$2" "$1"
}

# $1: variable name of repository root directory
# $2: variable name of config directory
lookup_repo_root() {
    local currdir=$(readlink -f $PWD)
    currdir="${currdir%/}"
    while [[ "$currdir" ]]; do
        if [[ -d "$currdir/.pb" ]]; then
            eval $1="$currdir"
            eval $2="$currdir/.pb"
            return
        fi
        currdir="${currdir%/*}"
    done

    return 1
}

dep_add() {
    while [[ 0 != $# ]]; do
        dependencies["$1"]="$1"

        shift
    done
}

dep_check() {
    local dep
    local -a missed_dep
    for dep in "${dependencies[@]}"; do
        if hash $dep &>/dev/null; then
            return
        fi

        missed_dep+=("$dep")
    done

    if [[ 0 != ${#missed_dep} ]]; then
        echo "following command(s) are required but not found: ${missed_dep[@]}"
        return 1
    fi
}

# $1: pid
# $2: wait interval
timeout_wait() {
    if [[ ! -d "/proc/$1" ]]; then
        return
    fi

    sleep $2

    [[ ! -d "/proc/$1" ]]
}

declare -a cleanup_jobs
declare -A dependencies

dep_add dd sleep
