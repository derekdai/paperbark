#!/bin/bash
commands['remove-snapshot']='remove snapshot'
command_alias['rm-snap']='remove-snapshot'

remove_snapshot_help() {
    echo """
usage: 
    $pb_exec remove-snapshot|rm-snap [-rn] SNAPSHOT
              -r    remove snapshot and its decendants immediately
              -n    dry-run. to see what will be destroyed
        SNAPSHOT    snapshot ID to be deleted

if a snapshot have decentants, remove-snapshot will simply mark it
as deleted and prevent it from been listed. the storage space the snapshot
occupied will only be freed on all decentants gone.

WARNING: if -r specified, remove-snapshot will remove specified snapshots
and all its decentants IMMEDIATELY!
"""

    exit 0
}

cmd_remove_snapshot_prepare() {
    while [[ 0 != $# ]]; do
        case "$1" in
            -r)
                remove_snapshot_recursive=yes
                ;;
            -n)
                remove_snapshot_dry_run=yes
                ;;
            *)
                if ! snapshot_id_normalize "$1" remove_snapshot_id; then
                    echo \'$1\' is not a snapshot >&2
                    exit 1
                fi
        esac

        shift
    done

    if [[ -z "${remove_snapshot_id}" ]]; then
        remove_snapshot_help
    fi
}

cmd_remove_snapshot_exec() {
    remove_snapshot() {
        if snapshot_has_strong_rdeps "$1" && [[ -z "$remove_snapshot_recursive" ]]; then
            snapshot_mark_destroyed "$1"
            return
        fi

        echo remove recursive
        snapshot_destroy_recursive "$1"
    }

    dump_dependents() {
        collect_rdeps() {
            if snapshot_is_marked_destroyed "$1"; then
                return
            fi

            echo -n "    $1 "
            if str_find "$1" :; then
                echo "(snapshot)"
            else
                echo "(staging filesystem)"
            fi
        }
        echo snapshot \'${1##*@}\' has following dependents
        snapshot_foreach_rdeps collect_rdeps "$1"
    }

    if [[ -z "$remove_snapshot_dry_run" ]]; then
        remove_snapshot "$remove_snapshot_id"
    elif ! snapshot_is_marked_destroyed "$remove_snapshot_id"; then
        dump_dependents "$remove_snapshot_id"
    fi
}
