#!/bin/bash
remote_load() {
    declare -g remotes_dir="$conf_dir/remotes"
    if [[ ! -d "$remotes_dir" ]]; then
        mkdir "$remotes_dir"
    fi

    local _url
    local _remote
    for _remote in "$remotes_dir"/*; do
        if [[ ! -f "$_remote" ]]; then
            continue
        fi

        read _url <"$_remote"
        _pb_remotes["${_remote##*/}"]="$_url"
    done
}

# $1: remote name
remote_exists() {
    [[ "${_pb_remotes[$1]}" ]]
}

# $1: variable name of remote
remote_get_default() {
    local _rgd_remote_name
    config_get 'default.remote' _rgd_remote_name
    if [[ -z "$_rgd_remote_name" ]]; then
        _rgd_remote_name='origin'
    fi
    eval $1="$_rgd_remote_name"
}

# $1: variable name of remote uri
remote_get_default_url() {
    local rgdu_remote_name
    remote_get_default rgdu_remote_name
    eval $1="${_pb_remotes[$rgdu_remote_name]}"
}

# $1: remote name
remote_set_default() {
    config_set 'default.remote' "$1"
}

# $1: remote name
# $2: remote url
remote_add() {
    remote_set "$1" "$2"
}

# $1: remote name
# $2: new remote name
remote_rename() {
    mv "$remotes_dir"/{$1,$2}
    _pb_remotes["$2"]="${_pb_remotes[$1]}"
    unset _pb_remotes["$1"]
}

# $1: remote name
remote_remove() {
    unlink "$remotes_dir/$1"
    unset _pb_remotes["$1"]
}

# $1: remote name
# $2: variable name of remote uri
remote_get() {
    eval $2="${_pb_remotes[$1]}"
}

# $1: remote name
# $2: remote url
remote_set() {
    echo "$2" >"$remotes_dir/$1"
}

remote_name_is_valid() {
    local _rniv_pattern="^[a-zA-Z0-9]"
    _rniv_pattern+='[.+_a-zA-Z0-9\-]*'
    _rniv_pattern+='[a-zA-Z0-9]?$'
    [[ "$1" =~ $_rniv_pattern ]]
}

declare -gA _pb_remotes
